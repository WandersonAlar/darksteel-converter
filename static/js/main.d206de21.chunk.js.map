{"version":3,"sources":["ConvertionApi.js","Mir4Api.js","Components/Converter.js","App.js","index.js"],"names":["GetUSDConvertion","currency","a","fetch","response","json","convertion","GetDracoPrice","method","DracoPrices","Data","lastest","GetDarksteelConvertion","darksteel","newst","Date","Math","max","map","e","CreatedDate","find","dk","created","getFullYear","getMonth","getDate","ConvertDarksteelToCurrency","currentAmount","DracoPriceInDarksteel","DracoPriceInDollar","draco","value","toFixed","Converter","useState","SetDarksteel","DS","SetDracoPriceInDarksteel","USDDracoRate","DracoPriceWemix","SetDracoPriceInDollar","DollarInBRL","SetdollarInBRL","ConvertedValue","SetConvertedValue","useEffect","then","className","src","alt","type","onChange","target","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAAMA,EAAgB,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,sEACEC,MAAM,gFAAD,OAAkFF,EAAlF,UADP,cACfG,EADe,gBAEIA,EAASC,OAFb,cAEfC,EAFe,yBAGdA,EAAWL,IAHG,2CAAH,sD,OCAhBM,EAAa,uCAAG,8BAAAL,EAAA,sEACKC,MAAM,iDAAkD,CAAEK,OAAQ,SADvE,cACZJ,EADY,gBAEQA,EAASC,OAFjB,cAEZI,EAFY,yBAGXA,EAAYC,KAAKC,SAHN,2CAAH,qDAMbC,EAAsB,uCAAG,gCAAAV,EAAA,sEACJC,MAAM,iDAAkD,CAAEK,OAAQ,SAD9D,cACrBJ,EADqB,gBAEHA,EAASC,OAFN,cAErBQ,EAFqB,OAGrBC,EAAQ,IAAIC,KAAKC,KAAKC,IAAL,MAAAD,KAAI,YAAQH,EAAUH,KAAKQ,KAAI,SAAAC,GAAC,OAAI,IAAIJ,KAAKI,EAAEC,mBAH3C,kBAIpBP,EAAUH,KAAKW,MAAK,SAAAC,GACvB,IAAIC,EAAU,IAAIR,KAAKO,EAAGF,aAC1B,OAAOG,EAAQC,gBAAkBV,EAAMU,eACnCD,EAAQE,aAAeX,EAAMW,YAC7BF,EAAQG,YAAcZ,EAAMY,cART,2CAAH,qD,OCuDtBC,EAA6B,SAACC,EAAeC,EAAuBC,GACtE,IAAIC,EAAQH,EAAgBC,EAE5B,MAAO,CAAEE,QAAOC,OADJD,EAAQD,GACSG,QAAQ,KAE1BC,EA9DG,WAEd,IAAI,EAA4BC,mBAAS,GAAzC,mBAAKtB,EAAL,KAAgBuB,EAAhB,KACI,EAAoDD,mBAAS,CAAEE,GAAI,WAAvE,mBAAKR,EAAL,KAA4BS,EAA5B,KACI,EAA8CH,mBAAS,CAAEI,aAAc,qBAAsBC,gBAAiB,SAAlH,mBAAKV,EAAL,KAAyBW,EAAzB,KACI,EAAgCN,mBAAS,GAA7C,mBAAKO,EAAL,KAAkBC,EAAlB,KACI,EAAsCR,mBAAS,CAAEJ,MAAO,EAAGC,MAAO,MAAtE,mBAAKY,EAAL,KAAqBC,EAArB,KAEAC,qBAAU,WACN9C,EAAiB,OAAO+C,KAAKJ,GAC7BpC,IAAgBwC,KAAKN,GACrB7B,IAAyBmC,MAAK,SAAAf,GAC1BM,EAAyBN,GACzBI,EAAaJ,EAAMK,SAExB,IAEHS,qBAAU,WACND,EAAkBlB,EAA2Bd,EAAWgB,EAAsBQ,GAAIP,EAAmBS,iBACtG,CAAC1B,EAAWgB,EAAuBC,IAUtC,OACI,qBAAKkB,UAAU,YAAf,SACI,sBAAKA,UAAU,OAAf,UACI,qBAAKA,UAAU,YAAf,SACI,qBAAKC,IAAI,yBAAyBC,IAAI,gBAE1C,wEACA,sBAAKF,UAAU,aAAf,UACI,uBAAOG,KAAK,SAASnB,MAAOnB,EAAWuC,SAAU,gBAAapB,EAAb,EAAGqB,OAAUrB,MAAb,OAA2BI,EAAaJ,MACzF,wBAAQsB,QAjBL,WACftD,EAAiB,OAAO+C,KAAKJ,GAC7BpC,IAAgBwC,KAAKN,GACrB7B,IAAyBmC,MAAK,SAAAf,GAC1BM,EAAyBN,GACzBI,EAAaJ,EAAMK,QAYX,4BAEJ,qBAAKW,UAAU,cAAf,SACI,6CAAgBJ,EAAeb,WAEnC,qBAAKiB,UAAU,cAAf,SACI,2CAAcJ,EAAeZ,WAEjC,qBAAKgB,UAAU,cAAf,SACI,4CAAeJ,EAAeZ,MAAQU,GAAaT,QAAQ,QAE/D,iDACA,8GACA,kDAAqBJ,EAAsBQ,GAA3C,uFCvCDkB,MAdf,WACE,OACE,qBAAKP,UAAU,MAAf,SAOE,cAAC,EAAD,OCNNQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d206de21.chunk.js","sourcesContent":["const GetUSDConvertion = async currency =>  {\r\n    const response = await fetch( `https://cdn.jsdelivr.net/gh/fawazahmed0/currency-api@1/latest/currencies/usd/${currency}.json`); \r\n    const convertion = await response.json();\r\n    return convertion[currency]\r\n}\r\n\r\nexport { GetUSDConvertion };","const GetDracoPrice = async () => {\r\n    const response = await fetch('https://api.mir4global.com/wallet/prices/draco', { method: \"POST\" });\r\n    const DracoPrices = await response.json();\r\n    return DracoPrices.Data.lastest\r\n}\r\n\r\nconst GetDarksteelConvertion = async () => {\r\n    const response = await fetch('https://api.mir4global.com/wallet/prices/derby', { method: \"POST\" });\r\n    const darksteel = await response.json();\r\n    const newst = new Date(Math.max(...darksteel.Data.map(e => new Date(e.CreatedDate))));\r\n    return darksteel.Data.find(dk => {\r\n        var created = new Date(dk.CreatedDate);\r\n        return created.getFullYear() === newst.getFullYear() &&\r\n            created.getMonth() === newst.getMonth() &&\r\n            created.getDate() === newst.getDate()\r\n    })\r\n}\r\n\r\n\r\nexport { GetDracoPrice, GetDarksteelConvertion }","import { GetUSDConvertion } from '../ConvertionApi'\r\nimport { GetDarksteelConvertion, GetDracoPrice } from '../Mir4Api'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nconst Converter = () => {\r\n\r\n    var [darksteel, SetDarksteel] = useState(0)\r\n    var [DracoPriceInDarksteel, SetDracoPriceInDarksteel] = useState({ DS: \"100015\" })\r\n    var [DracoPriceInDollar, SetDracoPriceInDollar] = useState({ USDDracoRate: \"2.0307830637612381\", DracoPriceWemix: \"3.48\" })\r\n    var [DollarInBRL, SetdollarInBRL] = useState(0.0)\r\n    var [ConvertedValue, SetConvertedValue] = useState({ draco: 0, value: \"0\" })\r\n\r\n    useEffect(() => {\r\n        GetUSDConvertion('brl').then(SetdollarInBRL)\r\n        GetDracoPrice().then(SetDracoPriceInDollar)\r\n        GetDarksteelConvertion().then(value => {\r\n            SetDracoPriceInDarksteel(value)\r\n            SetDarksteel(value.DS)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        SetConvertedValue(ConvertDarksteelToCurrency(darksteel, DracoPriceInDarksteel.DS, DracoPriceInDollar.USDDracoRate))\r\n    }, [darksteel, DracoPriceInDarksteel, DracoPriceInDollar])\r\n\r\n    const UpdateData = () => {\r\n        GetUSDConvertion('brl').then(SetdollarInBRL)\r\n        GetDracoPrice().then(SetDracoPriceInDollar)\r\n        GetDarksteelConvertion().then(value => {\r\n            SetDracoPriceInDarksteel(value)\r\n            SetDarksteel(value.DS)\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"converter\">\r\n            <div className=\"card\">\r\n                <div className=\"darksteel\">\r\n                    <img src=\"./images/darksteel.png\" alt=\"darksteel\" />\r\n                </div>\r\n                <h3>Check how much your darksteel is worth</h3>\r\n                <div className=\"card-input\">\r\n                    <input type='number' value={darksteel} onChange={({ target: { value } }) => SetDarksteel(value)} />\r\n                    <button onClick={UpdateData}>Update Data</button>\r\n                </div>\r\n                <div className=\"card-result\">\r\n                    <strong>Draco: {ConvertedValue.draco}</strong>\r\n                </div>\r\n                <div className=\"card-result\">\r\n                    <strong>USD: {ConvertedValue.value}</strong>\r\n                </div>\r\n                <div className=\"card-result\">\r\n                    <strong>BRL: {(ConvertedValue.value * DollarInBRL).toFixed(5)}</strong>\r\n                </div>\r\n                <strong>Disclaimer:</strong>\r\n                <small>1. You can only trade a whole draco, broken numbers for comparisson only.</small>\r\n                <small>2. For every {DracoPriceInDarksteel.DS} you need to pay the fee of 1000 darksteel not included in the calculation.</small>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ConvertDarksteelToCurrency = (currentAmount, DracoPriceInDarksteel, DracoPriceInDollar) => {\r\n    var draco = currentAmount / DracoPriceInDarksteel;\r\n    var value = draco * DracoPriceInDollar\r\n    return { draco, value: value.toFixed(5) }\r\n}\r\nexport default Converter;","import './App.css';\nimport Converter from './Components/Converter';\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <label>Darksteel</label>\n      <input type='number' value={darksteel} onChange={({ target: { value } }) => SetDarksteel(value)} />\n      <p>*Not including fee: 1000 darksteel</p>\n      <h3>Draco: {ConvertedValue.draco} (you can only trade a whole draco, broken numbers for comparisson only)</h3>\n      <h3>Dollar: {ConvertedValue.value}</h3>\n      <h3>BRL: {(ConvertedValue.value * DollarInBRL).toFixed(5)}</h3> */}\n      <Converter />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}